---
import Layout from '../../layouts/Layout.astro'
import { dates } from './dates.js'
import OpenAI from 'openai'  

const polygonApiKey = import.meta.env.POLYGON_API_KEY
const openaiApiKey = import.meta.env.OPENAI_API_KEY

let actionPanelDisplay = 'flex';
let loadingPanelDisplay = 'hidden';
let outputPanelDisplay = 'hidden';
let apiMessage = 'Querying Stocks API...';
let reportOutput;
const tickerRegex = /^[A-Z]{1,5}$/;


if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const ticker = String(data.get("ticker")).toUpperCase();
    if (ticker && tickerRegex.test(ticker)) {
        reportOutput =  await fetchData(ticker);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

async function fetchData(ticker: string): Promise<string | undefined> {
    try {
        const url = `https://api.polygon.io/v2/aggs/ticker/${ticker}/range/1/day/${dates.startDate}/${dates.endDate}?apiKey=${polygonApiKey}`;
        const response = await fetch(url);
        const data = await response.text();
        const status = response.status;
        if (status === 200) {
        apiMessage = 'Creating report...';
        actionPanelDisplay = 'hidden';        
        loadingPanelDisplay = 'flex';
        return fetchReport(data);
      } else {
        apiMessage = 'There was an error fetching stock data.';
        console.error(apiMessage);
        console.log('URL: ',url);
        throw new Error(apiMessage);
      }
      console.log(data);
    } catch (error: any) {
      console.error('Error:', error);
      apiMessage = 'Unable to access stock data. Please refresh and try again';
    }
}

async function fetchReport(data: string): Promise<string | undefined> {
    try {
        const openai = new OpenAI({
            apiKey: openaiApiKey
        })
        const response = await openai.chat.completions.create({
            model: 'gpt-4',
            messages: [
                {
                    role: 'system',
                    content: 'You are a trading guru. Given data on share prices over the past 3 days, write a report of no more than 150 words describing the stocks performance and recommending whether to buy, hold or sell.'
                },
                {
                    role: 'user',
                    content: data
                }
            ]
        })
        if (response.choices[0].message.content !== null) {
            return renderReport(response.choices[0].message.content);
        } else {
            // Handle the case when content is null
            console.error('Content is null');
            throw new Error('Content is null');
        }
    
    } catch (error) {
        console.error('Error:', error)
        apiMessage = 'Unable to access AI. Please refresh and try again';
    }
}

function renderReport(response: string) {
    loadingPanelDisplay = 'hidden';
    outputPanelDisplay = 'flex';
    return response;
}
---

<Layout title="Stock Report">
    <header>
        <img src="https://scrimba.com/blobs/sha1:d7f0043ce5f57c1399e4cef0866afcc3f38c7319.png" alt="Dodgy Dave's Stock Predictions">
    </header>
    <main>
        <section class=`action-panel ${actionPanelDisplay}`>
            <form id="ticker-input-form" method="POST">
                <label for="ticker-input"> Add a ticker below to get a super accurate stock predictions reportðŸ‘‡ </label>
                <div class="form-input-control">
                    <input type="text" id="ticker-input" name="ticker" placeholder="MSFT">
                    <button class="add-ticker-btn">
                        <div class="add-ticker-svg">
                            <svg fill="#000000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                width="14px" height="14px" viewBox="0 0 349.03 349.031"
                                xml:space="preserve">
                            <g>
                                <path d="M349.03,141.226v66.579c0,5.012-4.061,9.079-9.079,9.079H216.884v123.067c0,5.019-4.067,9.079-9.079,9.079h-66.579
                                    c-5.009,0-9.079-4.061-9.079-9.079V216.884H9.079c-5.016,0-9.079-4.067-9.079-9.079v-66.579c0-5.013,4.063-9.079,9.079-9.079
                                    h123.068V9.079c0-5.018,4.069-9.079,9.079-9.079h66.579c5.012,0,9.079,4.061,9.079,9.079v123.068h123.067
                                    C344.97,132.147,349.03,136.213,349.03,141.226z"/>
                            </g>
                            </svg>
                        </div>
                    </button>
                    <div class="ticker-error absolute bg-white text-red-600 left-1/2 -translate-x-1/2 translate-y-16 hidden">The ticker provided is not valid</div>
                </div>
            </form>
            <p class="tag-line">Always correct 15% of the time!</p>
        </section>
        <section class=`loading-panel ${loadingPanelDisplay}`>
            <svg width="400px" height="400px" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid">
                <circle cx="50" cy="50" fill="none" stroke="#46ff90" stroke-width="10" r="35" stroke-dasharray="164.93361431346415 56.97787143782138">
                    <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="1s" keyTimes="0;1" values="0 50 50;360 50 50"></animateTransform>
                </circle>
            </svg>
            <div id="api-message">{apiMessage}</div>
        </section>
        <section class=`output-panel ${outputPanelDisplay}`>
            <h2>Your Report ðŸ˜œ</h2>
            {reportOutput}
            <button id="check-another" class="p-4 bg-slate-300 m-4 hover:bg-slate-500">Check another stock</button>
        </section>
    </main>
    <footer>
        &copy; This is not real financial advice!
    </footer>
</Layout>

    <script>
        const tickerRegex = /^[A-Z]{1,5}$/;

        // update input to capitalize letters
        document.getElementById('ticker-input')?.addEventListener('input', (e) => {
            const input = e.target as HTMLInputElement;
            input.value = input.value.toUpperCase();
        })
        document.getElementById('ticker-input-form')?.addEventListener('submit', (e) => {
            const tickerInput = document.getElementById('ticker-input') as HTMLInputElement;
            if (!tickerRegex.test(tickerInput.value)) {
                e.preventDefault();
                document.querySelector('.ticker-error')?.classList.remove('hidden');
            } else {
                document.querySelector('.add-ticker-btn')?.setAttribute('disabled', 'true');
                // hide action panel
                document.querySelector('.action-panel')?.classList.remove('flex');
                document.querySelector('.action-panel')?.classList.add('hidden');
                // show loading panel
                document.querySelector('.loading-panel')?.classList.remove('hidden');
                document.querySelector('.loading-panel')?.classList.add('flex');
            }
        })
        document.getElementById('check-another')?.addEventListener('click', () => {
            // hide output panel
            document.querySelector('.output-panel')?.classList.remove('flex');
            document.querySelector('.output-panel')?.classList.add('hidden');
            // show action panel
            document.querySelector('.action-panel')?.classList.remove('hidden');
            document.querySelector('.action-panel')?.classList.add('flex');
            // enable input
            document.querySelector('.add-ticker-btn')?.removeAttribute('disabled');
        })
    </script>

<style>
    @import './stock-report.css'
</style>

